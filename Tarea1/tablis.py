import pyodbc,datetime, random
conn = pyodbc.connect("DRIVER={Oracle en OraDB18Home1};DBQ=XE;Uid=nandi;Pwd=hp7500")
cur = conn.cursor()



#Funcion tabla_POYO: 
#No recibe parametros y no retorna nada.
#Crea la tabla POYO e ingresa los datos a ella del csv.

def tabla_POYO():
    cur.execute("DROP TABLE POYO")
    cur.execute(
        """
        CREATE TABLE POYO(
            pokenum NUMBER,
            nombrepkmn VARCHAR2(30),
            type1 VARCHAR2(25),
            type2 VARCHAR2(25),
            HP NUMBER,
            legendario VARCHAR2(5))
        """
        )
    reader= open("pokemon.csv", "r")
    for ln in reader:
        linea=ln.strip().split(",") #cada vez que lea una ","
        if linea[0] != "#":  # no es la primera linea del cvs
        #id, nombre, tipo1, tipo2, HP total, HP actual,Attack,Defense,Sp_Atk,Sp_Def,Speed,Generacion,Legendario
            cur.execute("INSERT INTO POYO VALUES(?,?,?,?,?,?)", (linea[0], linea[1], linea[2], linea[3], linea[5], linea[12]))
    reader.close()
    cur.commit()
tabla_POYO()

#tabla_Sansanito:
#No recibe parametros y no retorna nada.
#Crea la tabla SansanitoPokemon 
def tabla_Sansanito():
    cur.execute("DROP TABLE SansanitoPokemon")
    cur.execute(
        """
        CREATE TABLE SansanitoPokemon(
            ID NUMBER GENERATED by default on null as IDENTITY,
            pokenum NUMBER,
            nombrepkmn VARCHAR2(30),
            type1 VARCHAR2(25),
            type2 VARCHAR2(25),
            HP NUMBER,
            HP_max NUMBER,
            legendario VARCHAR2(5),
            estado VARCHAR2 (20),
            fecha TIMESTAMP,
            prioridad NUMBER)
        """
        )
    cur.commit()
tabla_Sansanito()
#Lista de los posibles estados de un pokemon
estados=["Envenenado","Paralizado","Quemado","Dormido","Congelado", "Null"]

#RellenarSansanito:
#No recibe parametros y no retorna nada.
#Llena los datos de la tabla Sansanito Pokemon con datos sacados de la tabla POYO aleatoriamente

def RellenarSansanito():
    capacidad = 0
    nom_aux = "uwu"
    while capacidad <= 45: #rellenar los primeros 45 espacios para realizar analisis mas profundo de los 5 restantes
        cur.execute("SELECT * FROM POYO SAMPLE(1)")
        pokemon = cur.fetchone()
        id_poke, nombre_poke, type1pkmn, type2pkmn, hp_poke, legend = pokemon  #desempaquetar tupla para mejor manejo de datos
        if legend == "True":
            #Se debe revisar si hay otro legendario con el mismo nombre
            cur.execute("SELECT * FROM SansanitoPokemon WHERE nombrepkmn = ?;",nombre_poke)
            nom_aux = cur.fetchone()
        else:
            capacidad+=1
        #Ahora creare los datos que son aleatorios en la tabla sansanito
        if nom_aux != nombre_poke:
            if legend == "True":
                capacidad+=5
            hp_act = random.randint(0,hp_poke) #le asigno un valor aleatorio entre 0 y su hp maximo de la tabla poyo
            prio = hp_poke - hp_act
            aux = random.randint(0,5)
            estado = estados[aux]
            if estado != "Null":
                prio+=10
            cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(id_poke,nombre_poke,type1pkmn,type2pkmn,hp_act, hp_poke, legend, estado,prio))
        cur.commit()
    if capacidad>45: #deben agregarse solo normales.
         a = 0
         while (capacidad<=49):
            cur.execute("SELECT * FROM POYO SAMPLE(1)")
            pokepoke = cur.fetchone()
            if (pokepoke[5] == "True"): #si es legendario no lo agrego
                a+=1
            else:
                hp_act = random.randint(0,int(pokepoke[4])) #le asigno un valor aleatorio entre 0 y su hp maximo de la tabla poyo
                prio = int(pokepoke[4]) - hp_act
                aux = random.randint(0,5)
                estado = estados[aux]
                if estado != "Null":
                    prio+=10
                cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokepoke[0], pokepoke[1],pokepoke[2],pokepoke[3],hp_act,pokepoke[4],pokepoke[5],estado,prio))
                cur.commit()
                capacidad+=1
                a+=1  
    else:   #la capacidad deberia ser 45
        cur.execute("SELECT * FROM POYO SAMPLE(1)")
        pokepoke = cur.fetchone()
        hp_act = random.randint(0,int(pokepoke[4])) #le asigno un valor aleatorio entre 0 y su hp maximo de la tabla poyo
        prio = int(pokepoke[4]) - hp_act
        aux = random.randint(0,5)
        estado = estados[aux]
        if estado != "Null":
            prio+=10
        if (pokepoke[5] == "True"): #si el pokemon a agregar es un legendario, se agrega y termina
            cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokepoke[0], pokepoke[1],pokepoke[2],pokepoke[3],hp_act,pokepoke[4],pokepoke[5],estado,prio))
            cur.commit()
            capacidad += 5
        else: #si se inserta uno normal, se obliga a insertar 4 normales más
            cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokepoke[0], pokepoke[1],pokepoke[2],pokepoke[3],hp_act,pokepoke[4],pokepoke[5],estado,prio))
            cur.commit()
            i = 0
            while (i<4):
                cur.execute("SELECT * FROM POYO SAMPLE(1)")
                pokepoke = cur.fetchone()
                if (pokepoke[5] == "True"):
                    i+=1
                else:
                    hp_act = random.randint(0,int(pokepoke[4])) #le asigno un valor aleatorio entre 0 y su hp maximo de la tabla poyo
                    prio = int(pokepoke[4]) - hp_act
                    aux = random.randint(0,5)
                    estado = estados[aux]
                    if estado != "Null":
                        prio+=10
                    cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokepoke[0], pokepoke[1],pokepoke[2],pokepoke[3],hp_act,pokepoke[4],pokepoke[5],estado,prio))
                    cur.commit()
                    i+=1

RellenarSansanito()

#Trigger:
#No recibe parametros y no retorna nada.
#Trigger creado para la función update. 
#Cada vez que se cambien los valores del HP o estado de un pokémon en la tabla Sansanito, este trigger actualiza la prioridad del mismo.

def trigger():
    cur.execute("""
                CREATE OR REPLACE TRIGGER upd
                BEFORE UPDATE OF HP, estado ON SansanitoPokemon FOR EACH ROW
                BEGIN
                IF UPDATING THEN
                            IF :new.estado = 'Null' THEN
                                :new.prioridad := :new.HP_max - :new.HP;
                            ELSE
                                :new.prioridad := :new.HP_max - :new.HP + 10;
                            END IF;
                        END IF;
                    END;
                """
                )

#Update:
#No recibe parametros y no retorna nada.
#Esta funcion pide por pantalla los datos a modificar (HP y estado) y los actualiza en la tabla SansanitoPokemon

def update():
    nid = int(input("Que pokemon desea modificar?(Ingrese id): "))
    cur.execute(f"SELECT * FROM SansanitoPokemon WHERE ID = '{nid}'")
    pokimon = cur.fetchone()
    new_state = input("Cual es el nuevo estado? (Si no desea cambiarlo, escriba '-'): ")
    print("Que HP actual desea darle al pokemon? (Considere que tiene ", int(pokimon[6]), " de HP max):  ")
    new_hp = int(input())
    print("Calculando prioridad.....")
    if new_state == "-":
        cur.execute(f""" UPDATE SansanitoPokemon
                    SET HP = '{new_hp}'
                    WHERE id = '{nid}'
                    """
        )
    else:
        cur.execute(f""" UPDATE SansanitoPokemon
                    SET HP = '{new_hp}', estado = '{new_state}'
                    WHERE id = '{nid}'
                    """
        )
    trigger()
    cur.commit()
    print("Pokemon modificado!")

def clave_primaria():
    cur.execute("""
                    ALTER TABLE SansanitoPokemon
                    ADD CONSTRAINT id_pkmn PRIMARY KEY (ID);
                    """)
    cur.commit()



#mas_prioridad:
#Vista de los 10 pokemon con mayor prioridad

def mas_prioridad():
    cur.execute(
        """
            CREATE OR REPLACE VIEW mas_prioridad AS
            SELECT * FROM
                (SELECT *
                FROM  SansanitoPokemon ORDER BY prioridad DESC)
            WHERE ROWNUM <= 10;
        """)
    cur.commit()



#menor_prioridad:
#Vista de 10 pokemon con menor prioridad

def menor_prioridad():
    cur.execute(
        """
            CREATE OR REPLACE VIEW menor_prioridad AS
            SELECT * FROM
                (SELECT *
                FROM  SansanitoPokemon ORDER BY prioridad)
            WHERE ROWNUM <= 10;
        """)
    cur.commit()    

#mas_tiempo:
#Vista con pokemon que lleva mas tiempo ingresado

def mas_tiempo():
    cur.execute(
        """
            CREATE OR REPLACE VIEW mas_tiempo AS
            SELECT * FROM
                (SELECT *
                FROM  SansanitoPokemon ORDER BY fecha)
            WHERE ROWNUM <= 1;
        """)
    cur.commit()  


#all_pkmn:
#Vista de los parametros Nombre, HP actual, HP Max y prioridad de todos los Pokemon, ordenados por prioridad.

def all_pkmn():
    cur.execute(
        """
            CREATE OR REPLACE VIEW all_pkmn AS
            SELECT * FROM
                (SELECT nombrepkmn, HP, HP_max, prioridad
                FROM  SansanitoPokemon ORDER BY prioridad DESC)
        """)
    cur.commit()

#estado_exc:
#Vista de todos los pokemon con estado especifico
def estado_exc():
    state=input("Que estado  (Quemado, Paralizado, Envenenado, Congelado, Dormido) desea buscar?: ")
    cur.execute(
        f"""
            CREATE OR REPLACE VIEW estado_exc AS
            SELECT * FROM
                (SELECT *
                FROM  SansanitoPokemon WHERE estado = '{state}')
        """)
    cur.commit()


#all_legends:
#Vista de todos los pokémon legendarios

def all_legends():
    strin = "True"
    cur.execute(
        f"""
            CREATE OR REPLACE VIEW estado_exc AS
            SELECT * FROM
                (SELECT *
                FROM  SansanitoPokemon WHERE legendario = '{strin}')
        """)
    cur.commit()

#nombre_repetido:
#ola

def nombre_repetido():
    cur.execute(
        """
        SELECT nombrepkmn, COUNT(nombrepkmn) AS contador
        FROM SansanitoPokemon
        GROUP BY nombrepkmn ORDER BY contador DESC

        """
        )
    print("El pokemon más repetido es: ", cur.fetchone()[0]," (",int(cur.fetchone()[1]), " veces)")

#read:
#La funcion no recibe ni retorna parametros.
#Se implemente la función read del CRUD, la cual muestra por pantalla la informacion de un pokemon con id correspondiente a la pedida.

def read():
    cant = input("Cuantos pokemones desea ver?: ")
    cant = (int(cant))
    i = 0
    while(i < cant):
        id = input("\nIngrese ID del pokemon:\n")
        cur.execute(f"select * from SansanitoPokemon WHERE ID = {id};")
        for fila in cur:
            print("------------------------------------------------------")
            print(f"Pokemon con ID {id}. Datos: ")
            print(f"Numero en la pokedex = {int(fila[1])}")
            print(f"Nombre= {fila[2]}")
            print(f"Primer tipo = {fila[3]}")
            print(f"Segundo tipo = {fila[4]}")
            print(f"HP actual = {int(fila[5])}")
            print(f"HP max = {int(fila[6])}")
            print(f"Legendario (True) o no legendario (False) = {fila[7]}")
            print(f"Estado = {fila[8]}")
            print(f"Fecha de ingreso = {fila[9]}")
            print(f"Prioridad = {int(fila[10])}")
        i+=1
        cur.commit()

#delete:
#La funcion no recibe ni retorna parametros.
#Se implemente la función delete del CRUD, la cual elimina de nuestra tabla SansanitoPokemon al pokemon con id correspondiente a la pedida.

def delete():
    id = input("\nIngrese el ID del pokemon que desea borrar: ")
    id = int(id)
    cur.execute(f"select * from SansanitoPokemon WHERE ID = '{id}';")
    cur.execute(
        f"""
        DELETE FROM SansanitoPokemon WHERE ID = '{id}';
        """)
    cur.commit()
    print("Pokemon borrado exitosamente!")

#delete:
#La funcion no recibe ni retorna parametros.
#Se implemente la función create del CRUD, la cual agrega un pokemon a la tabla SansanitoPokemon con la informacion dada por el usuario.

def create():
    cur.execute(f"SELECT * FROM SansanitoPokemon WHERE legendario = 'True'")
    legenda = len(cur.fetchall())
    cur.execute("SELECT * FROM SansanitoPokemon")
    capacity = len(cur.fetchall())
    capacity = (capacity - legenda) + (legenda*5)
    nom = input("Nombre del pokemon que desea ingresar?: ")
    #Asumire que se introducira un nombre existente en la tabla POYO
    cur.execute(f"SELECT * FROM POYO WHERE nombrepkmn = '{nom}'")
    pokimon = cur.fetchone()
    if pokimon[5] == 'True': #se esta intentando ingresar un legendario
        #Verificar si ya esta en la tabla sansanito
        cur.execute(f"SELECT * FROM SansanitoPokemon WHERE nombrepkmn = '{nom}'")
        leg = len(cur.fetchall())
        if leg != 0:
            print("No se puede agregar porque ya existe un legendario con el mismo nombre en la tabla Sansanito")
        else:
            if capacity <= 45: #se ingresa sin problemas
                state = input("Que estado desea darle al pokemon?: ")
                print("Que HP actual desea darle al pokemon? (Considere que tiene ", int(pokimon[4]), " de HP max):  ")
                hp_nue = int(input())
                nue_prio = pokimon[4] - hp_nue
                if state != "Null":
                    nue_prio+= 10
                cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokimon[0], pokimon[1],pokimon[2],pokimon[3],hp_nue,pokimon[4],pokimon[5],state,nue_prio))
                cur.commit()
                print("Pokemon ingresado exitosamente!")
                capacity += 5
            else: #hay que comprobar si hay un legendario con menor prioridad
                state = input("Que estado desea darle al pokemon?: ")
                print("Que HP actual desea darle al pokemon? (Considere que tiene ", int(pokimon[4]), " de HP max):  ")
                hp_nue = int(input())
                nue_prio = pokimon[4] - hp_nue
                if state != "Null":
                    nue_prio+= 10
                if legenda == 0:
                    print("No se puede ingresar.")
                else:
                    cur.execute("""SELECT * FROM SansanitoPokemon
                                    WHERE legendario = 'True'
                                    ORDER BY prioridad ASC""")
                    pkmn_compare = cur.fetchone()
                    if pkmn_compare[10] < nue_prio : 
                        cur.execute("DELETE FROM SansanitoPokemon WHERE ID = ?", (pkmn_compare[0]))
                        cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokimon[0], pokimon[1],pokimon[2],pokimon[3],hp_nue,pokimon[4],pokimon[5],state,nue_prio))
                        cur.commit()
                        print("Pokemon ingresado exitosamente!")
                    else:
                        print("La prioridad del pokemon a ingresar es menor de los que ya estan en el Sansanito Pokemon")
    else: #se quiere agregar uno normal
        if capacity == 50: #ver si hay un pokemon con menor prioridad
            state = input("Que estado desea darle al pokemon?: ")
            print("Que HP actual desea darle al pokemon? (Considere que tiene ", int(pokimon[4]), " de HP max):  ")
            hp_nue = int(input())
            nue_prio = pokimon[4] - hp_nue
            if state != "Null":
                nue_prio+= 10
            cur.execute("""SELECT * FROM SansanitoPokemon
                                WHERE legendario = 'False'
                                ORDER BY prioridad ASC""")
            pkmn_compare = (cur.fetchone())
            if pkmn_compare[10] < nue_prio : 
                cur.execute("DELETE FROM SansanitoPokemon WHERE ID = ?", (pkmn_compare[0]))
                cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokimon[0], pokimon[1],pokimon[2],pokimon[3],hp_nue,pokimon[4],pokimon[5],state,nue_prio))
                cur.commit()
                print("Pokemon ingresado exitosamente!")
            else:
                print("La prioridad del pokemon a ingresar es menor de los que ya estan en el Sansanito Pokemon")
        else: #agregar sin problemas
            state = input("Que estado desea darle al pokemon?: ")
            print("Que HP actual desea darle al pokemon? (Considere que tiene ", int(pokimon[4]), " de HP max):  ")
            hp_nue = int(input())
            nue_prio = pokimon[4] - hp_nue
            cur.execute("INSERT INTO SansanitoPokemon (pokenum,nombrepkmn,type1,type2,HP, HP_max,legendario,estado,fecha,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokimon[0], pokimon[1],pokimon[2],pokimon[3],hp_nue,pokimon[4],pokimon[5],state,nue_prio))
            cur.commit()
            print("Pokemon ingresado exitosamente!")
            capacity+=1


#main:
#funcion main del programa, que implementa un menu para que el usuario pueda realizar las distintas consultas a la base de datos

def main():
    opcion = 0
    crud  = 0
    while (opcion != 10):
        print("------------------------------------------------------")
        print("¿Que accion desea realizar?")
        print("1. CRUD")
        print("2. Ingresar un pokemon.")
        print("3. Ver los 10 pokémon con mayor prioridad.")
        print("4. Ver los 10 pokémon con menor prioridad.")
        print("5. Ver todos los pokémon con un estado especifico.")
        print("6. Ver todos los pokémon legendarios.")
        print("7. Ver el pokémon con mayor tiempo ingresado.")
        print("8. Ver el nombre del pokémon más repetido.")
        print("9. Datos de todos los Pokemon ordenados por prioridad.")
        print("10. Salir")
        opcion = int(input("Opcion:  "))
        if opcion == 1:
            print("------------------------------------------------------")
            print("1. Create")
            print("2. Read") 
            print("3. Update") 
            print("4. Delete") 
            crud = int(input("Opcion: "))
            if crud == 1:
                create()
            if crud == 2:
                read()
            if crud == 3:
                update()
            if crud == 4:
                delete()
        if opcion == 2:
            create()
        if opcion == 3:
            mas_prioridad()
            print("------------------------------------------------------")
            print("\nLos 10 con mayor prioridad son:\n")
            cur.execute(
            """
            SELECT * from mas_prioridad;
            """
            )
            i = 1
            for row in cur:
                print(f"{i}. Numero en la pokedex= {int(row[1])},     Nombre = {row[2]},    Vida = {int(row[5])}/{int(row[6])},    Prioridad = {int(row[10])}")
                i+=1
            cur.commit()
        if opcion == 4:
            menor_prioridad()
            print("------------------------------------------------------")
            print("\nLos 10 con menor prioridad son:\n")
            cur.execute(
            """
            SELECT * from menor_prioridad;
            """
            )
            i = 1
            for row in cur:
                print(f"{i}. Numero en la pokedex= {int(row[1])},     Nombre = {row[2]},    Vida = {int(row[5])}/{int(row[6])},    Prioridad = {int(row[10])}")
                i+=1
            cur.commit()
        if opcion == 5:
            estado_exc()
            print("------------------------------------------------------")
            print("\nLos pokemones con ese estado son:\n")
            cur.execute(
            """
            SELECT * from estado_exc;
            """
            )
            i=1
            for row in cur:
                print(f"{i}. Numero en la pokedex= {int(row[1])},     Nombre = {row[2]},    Vida = {int(row[5])}/{int(row[6])},    Prioridad = {int(row[10])}")
                i+=1
            cur.commit()
        if opcion == 6:
            all_legends()
            print("------------------------------------------------------")
            print("\nLos pokemones legendarios son:\n")
            cur.execute(
            """
            SELECT * from estado_exc;
            """
            )
            i=1
            for row in cur:
                print(f"{i}. Numero en la pokedex= {int(row[1])},     Nombre = {row[2]},    Vida = {int(row[5])}/{int(row[6])},    Prioridad = {int(row[10])}")
                i+=1
            cur.commit()
        if opcion == 7:
            mas_tiempo()
            print("------------------------------------------------------")
            print("\nEl pokémon con mayor tiempo ingresado es:\n")
            cur.execute(
            """
            SELECT * from mas_tiempo;
            """
            )
            i=1
            for row in cur:
                print(f"{i}. Numero en la pokedex= {int(row[1])},     Nombre = {row[2]},    Vida = {int(row[5])}/{int(row[6])},    Prioridad = {int(row[10])}")
                i+=1
            cur.commit()
        if opcion == 8:
            print("------------------------------------------------------")
            nombre_repetido()
        if opcion == 9:
            all_pkmn()
            print("------------------------------------------------------")
            print("\nTodos los pokemones:\n")
            cur.execute(
            """
            SELECT * from all_pkmn;
            """
            )
            i=1
            for row in cur:
                print(f"{i}. Nombre = {row[0]},    HP= {int(row[1])},   HP max= {int(row[2])},   Prioridad = {int(row[3])}")
                i+=1
            cur.commit()
main()